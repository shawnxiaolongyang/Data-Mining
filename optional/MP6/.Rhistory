par(mfrow=c(dim(ff)[1],1))
for (i in 1:dim(ff)[1]){
barplot(as.matrix(ff[i,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=colours)
}
} else if (length(dim(ff)) == 4 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
barplot(as.matrix(ff[i,j,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1, cex.main = 1, beside=TRUE, col=colours)
}
}
} else if (length(dim(ff)) == 5 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2], dim(ff)[3]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
for (k in 1:dim(ff)[3]){
barplot(as.matrix(ff[i,j,k,]), main="My Barchart", ylab = "Numbers", cex.lab = 10, cex.main = 10, beside=TRUE, col=colours)
}
}
}
}
return(0)
}
mmfunc(revenue_cube[, , '2013',,])
revenue_cube[,,,'CA',]
View(sales_fact)
apply(revenue_cube, c("CA,))
1
clc
)
>
q()
a = c()
;
setwd('C:/Users/xyang/Desktop/COURSE/CS412 Datamining/HW/optional/MP6')
sales_fact<-read.csv("transactions.csv", header = TRUE, sep=' ')
#
myfunction <- function(x){
temp = 0
if( is.null(x) )
return(temp)
temp = sum(x)
return(temp)
}
a = c()
myfunction(a)
#build a data_cube,
revenue_cube <-
tapply(sales_fact$amount,
sales_fact[,c("prod", "month", "year", "loc","unit")],
FUN=myfunction)
revenue_cube[is.na(revenue_cube)] <- 0
#plot
mmfunc <- function(ff) {
if( length(dim(ff)) < 3 ){
print("here1")
barplot(as.matrix(ff), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=colours)
} else if (length(dim(ff)) == 3 ) {
par(mfrow=c(dim(ff)[1],1))
for (i in 1:dim(ff)[1]){
barplot(as.matrix(ff[i,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=colours)
}
} else if (length(dim(ff)) == 4 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
barplot(as.matrix(ff[i,j,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1, cex.main = 1, beside=TRUE, col=colours)
}
}
} else if (length(dim(ff)) == 5 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2], dim(ff)[3]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
for (k in 1:dim(ff)[3]){
barplot(as.matrix(ff[i,j,k,]), main="My Barchart", ylab = "Numbers", cex.lab = , cex.main = 10, beside=TRUE, col=colours)
}
}
}
}
return(0)
}
View(sales_fact)
apply(revenue_cube, c("CA","year"),)
apply(revenue_cube, c("CA","year"),FUN=myfunction(x) {return(sum(x,na.rm=TRUE))}))
apply(revenue_cube, c("CA","year"),FUN=myfunction(x))
apply(revenue_cube, c("CA","year"),FUN=function(x) {return(sum(x,na.rm=TRUE))}))
apply(revenue_cube, c("CA","year"),FUN=function(x) {return(sum(x,na.rm=TRUE))})
revenue_cube[c("CA")]
revenue_cube[,,,c("CA"),]
View(myfunction)
View(myfunction)
apply(revenue_cube[,,,c("CA"),],c("year"),FUN = myfunction(x))
apply(revenue_cube[,,,c("CA"),],c("year"),FUN = myfunction())
myfunction(revenue_cube[,,,c("CA"),],c("year"))
apply(revenue_cube[,,,c("CA"),],c("year"),FUN = myfunction)
apply(revenue_cube[,,,c("CA"),],c("year","month"),FUN = myfunction)
mmfunc(apply(revenue_cube[,,,c("CA"),],c("year"),FUN = myfunction))
mmfunc(apply(revenue_cube[,,,c("CA"),],c("year","month"),FUN = myfunction))
setwd('C:/Users/xyang/Desktop/COURSE/CS412 Datamining/HW/optional/MP6')
sales_fact<-read.csv("transactions.csv", header = TRUE, sep=' ')
#
myfunction <- function(x){
temp = 0
if( is.null(x) )
return(temp)
temp = sum(x)
return(temp)
}
a = c()
myfunction(a)
#build a data_cube,
revenue_cube <-
tapply(sales_fact$amount,
sales_fact[,c("prod", "month", "year", "loc","unit")],
FUN=myfunction)
revenue_cube[is.na(revenue_cube)] <- 0
#plot
mmfunc <- function(ff) {
if( length(dim(ff)) < 3 ){
print("here1")
barplot(as.matrix(ff), main="changes of the amount of the sales transactions from “CA” over time", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=colours)
} else if (length(dim(ff)) == 3 ) {
par(mfrow=c(dim(ff)[1],1))
for (i in 1:dim(ff)[1]){
barplot(as.matrix(ff[i,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=colours)
}
} else if (length(dim(ff)) == 4 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
barplot(as.matrix(ff[i,j,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1, cex.main = 1, beside=TRUE, col=colours)
}
}
} else if (length(dim(ff)) == 5 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2], dim(ff)[3]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
for (k in 1:dim(ff)[3]){
barplot(as.matrix(ff[i,j,k,]), main="My Barchart", ylab = "Numbers", cex.lab = , cex.main = 10, beside=TRUE, col=colours)
}
}
}
}
return(0)
}
mmfunc(apply(revenue_cube[,,,c("CA"),],c("year","month"),FUN = myfunction))
revenue_cube[c("Tablet","Laptop"), c("1","2","3"), , c("CA","NZ")]
, , year = 2012, loc = CA
revenue_cube[,
c("1","2","3","4","5","6"),
,
,]
, , year = 2012, loc = CA
revenue_cube[, c("1","2","3","4","5","6"),,,]
, , year = 2012, loc = CA, unit = 2
revenue_cube[, c("1","2","3","4","5","6"),,,]
, , year = 2012, loc = CA, unit = 2
revenue_cube[, c("1","2","3","4","5","6"),
c("2012"),
c("NZ"),
c("2")]
mmfunc(revenue_cube[, c("1","2","3","4","5","6"),c("2012"),c("NZ"),c("2")],FUN = myfunction))
mmfunc(revenue_cube[, c("1","2","3","4","5","6"),c("2012"),c("NZ"),c("2")],FUN = myfunction)
revenue_cube[, c("1","2","3","4","5","6"),c("2012"),c("NZ"),c("2")]
mmfunc(revenue_cube[, c("1","2","3","4","5","6"),c("2012"),c("NZ"),c("2")],FUN = myfunction)
ff <- revenue_cube[, c("1","2","3","4","5","6"),c("2012"),c("NZ"),c("2")]
mmfunc(ff,FUN = myfunction)
View(mmfunc)
View(mmfunc)
mmfunc(ff)
setwd('C:/Users/xyang/Desktop/COURSE/CS412 Datamining/HW/optional/MP6')
sales_fact<-read.csv("transactions.csv", header = TRUE, sep=' ')
#
myfunction <- function(x){
temp = 0
if( is.null(x) )
return(temp)
temp = sum(x)
return(temp)
}
a = c()
myfunction(a)
#build a data_cube,
revenue_cube <-
tapply(sales_fact$amount,
sales_fact[,c("prod", "month", "year", "loc","unit")],
FUN=myfunction)
revenue_cube[is.na(revenue_cube)] <- 0
#plot
mmfunc <- function(ff) {
if( length(dim(ff)) < 3 ){
print("here1")
barplot(as.matrix(ff), main="changes of the amount of the sales transactions from “CA” over time", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=colours)
} else if (length(dim(ff)) == 3 ) {
par(mfrow=c(dim(ff)[1],1))
for (i in 1:dim(ff)[1]){
barplot(as.matrix(ff[i,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=c("red","green","orange","blue"))
}
} else if (length(dim(ff)) == 4 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
barplot(as.matrix(ff[i,j,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1, cex.main = 1, beside=TRUE, col=colours)
}
}
} else if (length(dim(ff)) == 5 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2], dim(ff)[3]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
for (k in 1:dim(ff)[3]){
barplot(as.matrix(ff[i,j,k,]), main="My Barchart", ylab = "Numbers", cex.lab = , cex.main = 10, beside=TRUE, col=colours)
}
}
}
}
return(0)
}
mmfunc(ff)
setwd('C:/Users/xyang/Desktop/COURSE/CS412 Datamining/HW/optional/MP6')
sales_fact<-read.csv("transactions.csv", header = TRUE, sep=' ')
#
myfunction <- function(x){
temp = 0
if( is.null(x) )
return(temp)
temp = sum(x)
return(temp)
}
a = c()
myfunction(a)
#build a data_cube,
revenue_cube <-
tapply(sales_fact$amount,
sales_fact[,c("prod", "month", "year", "loc","unit")],
FUN=myfunction)
revenue_cube[is.na(revenue_cube)] <- 0
#plot
mmfunc <- function(ff) {
if( length(dim(ff)) < 3 ){
print("here1")
barplot(as.matrix(ff), main="changes of the amount of the sales transactions from “CA” over time", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=colours)
} else if (length(dim(ff)) == 3 ) {
par(mfrow=c(dim(ff)[1],1))
for (i in 1:dim(ff)[1]){
barplot(as.matrix(ff[i,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=c("red","green","orange","blue"))
}
} else if (length(dim(ff)) == 4 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
barplot(as.matrix(ff[i,j,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1, cex.main = 1, beside=TRUE, col=c("red","green","orange","blue"))
}
}
}
return(0)
}
mmfunc(ff)
mmfunc(ff)
setwd('C:/Users/xyang/Desktop/COURSE/CS412 Datamining/HW/optional/MP6')
sales_fact<-read.csv("transactions.csv", header = TRUE, sep=' ')
#
myfunction <- function(x){
temp = 0
if( is.null(x) )
return(temp)
temp = sum(x)
return(temp)
}
a = c()
myfunction(a)
#build a data_cube,
revenue_cube <-
tapply(sales_fact$amount,
sales_fact[,c("prod", "month", "year", "loc","unit")],
FUN=myfunction)
revenue_cube[is.na(revenue_cube)] <- 0
#plot
mmfunc <- function(ff) {
if( length(dim(ff)) < 3 ){
print("here1")
barplot(as.matrix(ff), main="changes of the amount of the sales transactions from “CA” over time", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=c("red","green","orange","blue"))
} else if (length(dim(ff)) == 3 ) {
par(mfrow=c(dim(ff)[1],1))
for (i in 1:dim(ff)[1]){
barplot(as.matrix(ff[i,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=c("red","green","orange","blue"))
}
} else if (length(dim(ff)) == 4 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
barplot(as.matrix(ff[i,j,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1, cex.main = 1, beside=TRUE, col=c("red","green","orange","blue"))
}
}
}
return(0)
}
mmfunc(ff)
setwd('C:/Users/xyang/Desktop/COURSE/CS412 Datamining/HW/optional/MP6')
sales_fact<-read.csv("transactions.csv", header = TRUE, sep=' ')
#
myfunction <- function(x){
temp = 0
if( is.null(x) )
return(temp)
temp = sum(x)
return(temp)
}
a = c()
myfunction(a)
#build a data_cube,
revenue_cube <-
tapply(sales_fact$amount,
sales_fact[,c("prod", "month", "year", "loc","unit")],
FUN=myfunction)
revenue_cube[is.na(revenue_cube)] <- 0
#plot
mmfunc <- function(ff) {
if( length(dim(ff)) < 3 ){
print("here1")
barplot(as.matrix(ff), main="changes of the amount of the sales transactions from “CA” over time", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=c("red","green","orange","blue"))
} else if (length(dim(ff)) == 3 ) {
par(mfrow=c(dim(ff)[1],1))
for (i in 1:dim(ff)[1]){
barplot(as.matrix(ff[i,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=c("red","green","orange"))
}
} else if (length(dim(ff)) == 4 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
barplot(as.matrix(ff[i,j,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1, cex.main = 1, beside=TRUE, col=c("red","green","orange","blue"))
}
}
}
return(0)
}
mmfunc(ff)
setwd('C:/Users/xyang/Desktop/COURSE/CS412 Datamining/HW/optional/MP6')
sales_fact<-read.csv("transactions.csv", header = TRUE, sep=' ')
#
myfunction <- function(x){
temp = 0
if( is.null(x) )
return(temp)
temp = sum(x)
return(temp)
}
a = c()
myfunction(a)
#build a data_cube,
revenue_cube <-
tapply(sales_fact$amount,
sales_fact[,c("prod", "month", "year", "loc","unit")],
FUN=myfunction)
revenue_cube[is.na(revenue_cube)] <- 0
#plot
mmfunc <- function(ff) {
if( length(dim(ff)) < 3 ){
print("here1")
barplot(as.matrix(ff), main="changes of the amount of the sales transactions from “CA” over time", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=c("red","green","orange","blue"))
} else if (length(dim(ff)) == 3 ) {
par(mfrow=c(dim(ff)[1],1))
for (i in 1:dim(ff)[1]){
barplot(as.matrix(ff[i,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE, col=c("red","green","orange","blue"))
}
} else if (length(dim(ff)) == 4 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
barplot(as.matrix(ff[i,j,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1, cex.main = 1, beside=TRUE, col=c("red","green","orange","blue"))
}
}
}
return(0)
}
mmfunc(ff)
mmfunc(ff)
setwd('C:/Users/xyang/Desktop/COURSE/CS412 Datamining/HW/optional/MP6')
sales_fact<-read.csv("transactions.csv", header = TRUE, sep=' ')
#
myfunction <- function(x){
temp = 0
if( is.null(x) )
return(temp)
temp = sum(x)
return(temp)
}
a = c()
myfunction(a)
#build a data_cube,
revenue_cube <-
tapply(sales_fact$amount,
sales_fact[,c("prod", "month", "year", "loc","unit")],
FUN=myfunction)
revenue_cube[is.na(revenue_cube)] <- 0
#plot
mmfunc <- function(ff) {
if( length(dim(ff)) < 3 ){
print("here1")
barplot(as.matrix(ff), main="changes of the amount of the sales transactions from “CA” over time", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE)
} else if (length(dim(ff)) == 3 ) {
par(mfrow=c(dim(ff)[1],1))
for (i in 1:dim(ff)[1]){
barplot(as.matrix(ff[i,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE)
}
} else if (length(dim(ff)) == 4 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
barplot(as.matrix(ff[i,j,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1, cex.main = 1, beside=TRUE)
}
}
}
return(0)
}
mmfunc(ff)
setwd('C:/Users/xyang/Desktop/COURSE/CS412 Datamining/HW/optional/MP6')
sales_fact<-read.csv("transactions.csv", header = TRUE, sep=' ')
#
myfunction <- function(x){
temp = 0
if( is.null(x) )
return(temp)
temp = sum(x)
return(temp)
}
a = c()
myfunction(a)
#build a data_cube,
revenue_cube <-
tapply(sales_fact$amount,
sales_fact[,c("prod", "month", "year", "loc","unit")],
FUN=myfunction)
revenue_cube[is.na(revenue_cube)] <- 0
#plot
mmfunc <- function(ff) {
if( length(dim(ff)) < 3 ){
print("here1")
barplot(as.matrix(ff), main="Which product has the most popularity (units = 2) in “NZ” during the first six months of the year 2012", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE)
} else if (length(dim(ff)) == 3 ) {
par(mfrow=c(dim(ff)[1],1))
for (i in 1:dim(ff)[1]){
barplot(as.matrix(ff[i,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE)
}
} else if (length(dim(ff)) == 4 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
barplot(as.matrix(ff[i,j,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1, cex.main = 1, beside=TRUE)
}
}
}
return(0)
}
mmfunc(apply(revenue_cube[,,,c("CA"),],c("year","month"),FUN = myfunction))
mmfunc(revenue_cube[, c("1","2","3","4","5","6"),c("2012"),c("NZ"),c("2")],FUN = myfunction))
mmfunc(ff)
mmfunc(revenue_cube[, c("1","2","3","4","5","6"),c("2012"),c("NZ"),c("2")],FUN = myfunction)
B <- revenue_cube[, c("1","2","3","4","5","6"),c("2012"),c("NZ"),c("2")]
mmfunc(B, FUN = myfunction)
mmfunc(revenue_cube[, c("1","2","3","4","5","6"),c("2012"),c("NZ"),c("2")])
mmfunc(apply(revenue_cube[c("Tablet"),,,,],c("loc"),FUN = myfunction))
revenue_cube[c("Tablet"),,,,],c("loc"
revenue_cube[c("Tablet"),,,,],c("loc")
apply(revenue_cube[c("Tablet"),,,,],c("loc"),FUN = myfunction)
mmfunc(apply(revenue_cube[c("Tablet"),,,,],c("loc"),FUN = myfunction))
setwd('C:/Users/xyang/Desktop/COURSE/CS412 Datamining/HW/optional/MP6')
sales_fact<-read.csv("transactions.csv", header = TRUE, sep=' ')
#
myfunction <- function(x){
temp = 0
if( is.null(x) )
return(temp)
temp = sum(x)
return(temp)
}
a = c()
myfunction(a)
#build a data_cube,
revenue_cube <-
tapply(sales_fact$amount,
sales_fact[,c("prod", "month", "year", "loc","unit")],
FUN=myfunction)
revenue_cube[is.na(revenue_cube)] <- 0
#plot
mmfunc <- function(ff) {
if( length(dim(ff)) < 3 ){
print("here1")
barplot(as.matrix(ff), main="Which product has the most popularity (units = 2) in “NZ” during the first six months of the year 2012", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE)
} else if (length(dim(ff)) == 3 ) {
par(mfrow=c(dim(ff)[1],1))
for (i in 1:dim(ff)[1]){
barplot(as.matrix(ff[i,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1.5, cex.main = 1.4, beside=TRUE)
}
} else if (length(dim(ff)) == 4 ) {
par(mfrow=c(dim(ff)[1], dim(ff)[2]))
for (i in 1:dim(ff)[1]){
for (j in 1:dim(ff)[2]){
barplot(as.matrix(ff[i,j,,]), main="My Barchart", ylab = "Numbers", cex.lab = 1, cex.main = 1, beside=TRUE)
}
}
}
return(0)
}
# Question A
apply(revenue_cube[,,,c("CA"),],c("year","month"),FUN = myfunction)
mmfunc(apply(revenue_cube[,,,c("CA"),],c("year","month"),FUN = myfunction))
# Question B
revenue_cube[, c("1","2","3","4","5","6"),c("2012"),c("NZ"),c("2")]
mmfunc(revenue_cube[, c("1","2","3","4","5","6"),c("2012"),c("NZ"),c("2")])
# Question C
apply(revenue_cube[c("Tablet"),,,,],c("loc"),FUN = myfunction)
mmfunc(apply(revenue_cube[c("Tablet"),,,,],c("loc"),FUN = myfunction))
